/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package mylibraryapp.ui.form.book;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import mylibraryapp.domain.Author;
import mylibraryapp.domain.Book;
import mylibraryapp.exception.UserMessageException;
import mylibraryapp.service.BookService;
import mylibraryapp.service.impl.BookServiceImpl;
import mylibraryapp.ui.form.author.AuthorSelectForm;

/**
 *
 * @author Branislav Vujanov
 */
public class BookUpdateForm extends javax.swing.JDialog {

    private final Book selectedBook;
    private final List<Author> selectedAuthors = new ArrayList<>();
    private final BookService bookService ;
    /**
     * Creates new form BookEditForm
     */
    public BookUpdateForm(java.awt.Frame parent, boolean modal, Book selectedBook) {
        super(parent, modal);
        initComponents();
        this.selectedBook = selectedBook;
        bookService = new BookServiceImpl();
        prepareView();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlBook = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jhu = new javax.swing.JLabel();
        sdfsd = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtTitle = new javax.swing.JTextField();
        txtPrintingYear = new javax.swing.JTextField();
        txtQantity = new javax.swing.JTextField();
        btnSave = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        listAuthor = new javax.swing.JList();
        jLabel2 = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        btnDeleteBook = new javax.swing.JButton();
        btnAddAuthor = new javax.swing.JButton();
        btnDeleteAuthor = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        pnlBook.setBorder(javax.swing.BorderFactory.createTitledBorder("Izmena podataka o knizi"));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setText("Naslov:");

        jhu.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jhu.setText("Godina izdanja:");

        sdfsd.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        sdfsd.setText("Broj primeraka:");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setText("Autor(i):");

        btnSave.setText("Sacuvaj izmene");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        listAuthor.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jScrollPane2.setViewportView(listAuthor);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText(" ID:");

        txtId.setEditable(false);

        btnDeleteBook.setText("Izbrisi knjigu");
        btnDeleteBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteBookActionPerformed(evt);
            }
        });

        btnAddAuthor.setText("Dodaj autora ");
        btnAddAuthor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddAuthorActionPerformed(evt);
            }
        });

        btnDeleteAuthor.setText("Izbrisi autora");
        btnDeleteAuthor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteAuthorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlBookLayout = new javax.swing.GroupLayout(pnlBook);
        pnlBook.setLayout(pnlBookLayout);
        pnlBookLayout.setHorizontalGroup(
            pnlBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBookLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(pnlBookLayout.createSequentialGroup()
                        .addComponent(btnDeleteBook)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSave))
                    .addGroup(pnlBookLayout.createSequentialGroup()
                        .addGroup(pnlBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(sdfsd, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jhu, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(pnlBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtTitle)
                            .addComponent(txtPrintingYear)
                            .addComponent(txtQantity)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 298, Short.MAX_VALUE)
                            .addComponent(txtId))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAddAuthor)
                    .addComponent(btnDeleteAuthor))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlBookLayout.setVerticalGroup(
            pnlBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBookLayout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addGroup(pnlBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(pnlBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(pnlBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPrintingYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jhu, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(pnlBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtQantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sdfsd, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(pnlBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlBookLayout.createSequentialGroup()
                        .addGroup(pnlBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(pnlBookLayout.createSequentialGroup()
                        .addComponent(btnDeleteAuthor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                        .addComponent(btnAddAuthor)
                        .addGap(71, 71, 71)))
                .addGroup(pnlBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave)
                    .addComponent(btnDeleteBook))
                .addGap(20, 20, 20))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(pnlBook, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlBook, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        String error = "";
        try {
            String title = txtTitle.getText().trim();
            if (title.isEmpty()) throw new UserMessageException("Niste uneli naslov knjige");

            error = " za godinu izdanja";
            int printingYear = Integer.parseInt(txtPrintingYear.getText().trim());
            int currentYear = LocalDate.now().getYear();
            if (printingYear <1440 || printingYear > currentYear) throw new UserMessageException("Pogresan unos godine!\nGodina mora biti izmedju 1440 i trenutne godine");

            error = " primeraka";
            int quantity = Integer.parseInt(txtQantity.getText().trim());
            if (quantity < 0) throw new UserMessageException("Pogresan unos!\nBroj primeraka mora biti veci od 0");

//            DefaultListModel model = (DefaultListModel) listAuthor.getModel();
//            if (model.getSize() == 0) throw new UserMessageException("Niste uneli autora");
            if (selectedAuthors.isEmpty()) throw new UserMessageException("Niste uneli autora");

            selectedBook.setTitle(title);
            selectedBook.setPrintingYear(printingYear);
            selectedBook.setQuantity(quantity);
            selectedBook.setAuthors(selectedAuthors);
            System.out.println(selectedBook);
            bookService.update(selectedBook);
            
            JOptionPane.showMessageDialog(this, "Uspesno ste izmenili podatke o knjizi");
            
            selectedAuthors.clear();
            dispose();


        } catch (NumberFormatException numberFormatException) {
            JOptionPane.showMessageDialog(this, "Niste uneli broj" + error, "Greska!", JOptionPane.ERROR_MESSAGE);
        } catch (UserMessageException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, e.getMessage(), "Greska!", JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnAddAuthorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddAuthorActionPerformed
        AuthorSelectForm authorSelectForm = new AuthorSelectForm(null, true);
        authorSelectForm.setVisible(true);
        //nakon zatvaranja forme
        Author author = authorSelectForm.getSelectedAuthor();

        DefaultListModel model = new DefaultListModel();
        if (author != null) {
            selectedAuthors.add(author);
            for (Author selectedAuthor : selectedAuthors) {
                model.addElement(selectedAuthor);
            }
        }
        listAuthor.setModel(model);
    }//GEN-LAST:event_btnAddAuthorActionPerformed

    private void btnDeleteAuthorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteAuthorActionPerformed
        try {
            DefaultListModel model = (DefaultListModel) listAuthor.getModel();
            int index = listAuthor.getSelectedIndex();
            if (index != -1) {
                Author author = (Author) model.get(index);
                model.removeElementAt(index);
                
                selectedAuthors.remove(author);
            } else {
                JOptionPane.showMessageDialog(this, "Niste izabrali autora!");
            }

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnDeleteAuthorActionPerformed

    private void btnDeleteBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteBookActionPerformed

        try {         
            bookService.delete(selectedBook);
            JOptionPane.showMessageDialog(this, "Knjiga '" + selectedBook.getTitle() +"' je obrisana");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex);
        }
        dispose();
    }//GEN-LAST:event_btnDeleteBookActionPerformed

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddAuthor;
    private javax.swing.JButton btnDeleteAuthor;
    private javax.swing.JButton btnDeleteBook;
    private javax.swing.JButton btnSave;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel jhu;
    private javax.swing.JList listAuthor;
    private javax.swing.JPanel pnlBook;
    private javax.swing.JLabel sdfsd;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtPrintingYear;
    private javax.swing.JTextField txtQantity;
    private javax.swing.JTextField txtTitle;
    // End of variables declaration//GEN-END:variables

    private void prepareView() {
        if (selectedBook == null){
            JOptionPane.showMessageDialog(this, "Nije selektovana knjiga!");
            dispose();
        }
        else{
            txtId.setText(selectedBook.getId() +"");
            txtTitle.setText(selectedBook.getTitle());
            txtPrintingYear.setText(selectedBook.getPrintingYear() +"");
            txtQantity.setText(selectedBook.getQuantity() +"");
            
            DefaultListModel model = new DefaultListModel();
                for (Author author : selectedBook.getAuthors()) {
                    model.addElement(author);
                    selectedAuthors.add(author);
                }
            listAuthor.setModel(model);
                    
        }
    }
}
